{"ast":null,"code":"import axios from \"axios\";\nexport default class ApiService {\n  constructor() {\n    this.axiosInstance = axios.create({\n      baseURL: 'http://localhost:8080',\n      timeout: 10000,\n      withCredentials: true,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Thêm interceptor để xử lý token\n    this.axiosInstance.interceptors.request.use(config => {\n      const token = this.getToken();\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Thêm interceptor để xử lý lỗi\n    this.axiosInstance.interceptors.response.use(response => response, error => {\n      // Xử lý lỗi CORS hoặc lỗi mạng\n      if (error.code === 'ERR_NETWORK' || !error.response) {\n        console.error('Network error or CORS issue:', error.message);\n        return Promise.reject(new Error('Lỗi kết nối đến server. Vui lòng thử lại sau.'));\n      }\n      return Promise.reject(error);\n    });\n  }\n  static getHeader() {\n    const token = localStorage.getItem(\"token\");\n    console.log('Current token:', token); // Debug log\n\n    if (!token) {\n      console.warn('No token found in localStorage');\n      return {\n        \"Content-Type\": \"application/json\"\n      };\n    }\n    return {\n      'Authorization': `Bearer ${token}`,\n      \"Content-Type\": \"application/json\"\n    };\n  }\n\n  /**AUTH && USERS API */\n  static async registerUser(registration) {\n    const response = await axios.post(`${this.BASE_URL}/auth/register`, registration);\n    return response.data;\n  }\n  static async loginUser(loginDetails) {\n    const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails);\n    return response.data;\n  }\n  static async getLoggedInUserInfo() {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/user/info`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching user info:\", error);\n      return null;\n    }\n  }\n  static async getUserById(userId) {\n    const response = await axios.get(`${this.BASE_URL}/user/get-by-id`, {\n      headers: this.getHeader(),\n      params: {\n        id: userId\n      }\n    });\n    return response.data;\n  }\n  static async getAllUsers() {\n    const response = await axios.get(`${this.BASE_URL}/user/get-all`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /**PRODUCT ENDPOINT */\n  static async addProduct(formData) {\n    const token = localStorage.getItem(\"token\");\n    const response = await axios.post(`${this.BASE_URL}/product/create`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': token ? `Bearer ${token}` : undefined\n      }\n    });\n    return response.data;\n  }\n  static async updateProduct(formData) {\n    try {\n      const token = localStorage.getItem(\"token\");\n\n      // Log request details\n      console.log('=== DEBUG: Request Details ===');\n      console.log('URL:', `${this.BASE_URL}/product/update`);\n      console.log('Headers:', {\n        'Content-Type': 'multipart/form-data',\n        'Authorization': `Bearer ${token}`\n      });\n      console.log('FormData content:');\n      for (let [key, value] of formData.entries()) {\n        if (key === 'image') {\n          console.log('image:', value ? `File: ${value.name}` : 'No image');\n        } else {\n          console.log(`${key}:`, value, `(type: ${typeof value})`);\n        }\n      }\n      const response = await axios.put(`${this.BASE_URL}/product/update`, formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log('=== DEBUG: Response Success ===');\n      console.log('Status:', response.status);\n      console.log('Data:', response.data);\n      return response.data;\n    } catch (error) {\n      var _error$config, _error$config2, _error$config3, _error$response, _error$response2, _error$response3;\n      console.error('=== DEBUG: Error Details ===');\n      console.error('Request Config:', {\n        url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n        method: (_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.method,\n        headers: (_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.headers\n      });\n      console.error('Response Error:', {\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n        statusText: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText,\n        data: (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data\n      });\n      throw error;\n    }\n  }\n  static async getAllProducts() {\n    const response = await axios.get(`${this.BASE_URL}/product/get-all-product`);\n    return response.data;\n  }\n  static async searchProducts(searchValue) {\n    const response = await axios.get(`${this.BASE_URL}/product/search`, {\n      params: {\n        searchValue\n      }\n    });\n    return response.data;\n  }\n  static async getAllProductsByCategoryId(categoryId) {\n    const response = await axios.get(`${this.BASE_URL}/product/get-product-by-category`, {\n      params: {\n        categoryId\n      }\n    });\n    return response.data;\n  }\n  static async getProductById(productId) {\n    const response = await axios.get(`${this.BASE_URL}/product/get-product-by-id`, {\n      params: {\n        id: productId\n      }\n    });\n    return response.data;\n  }\n  static async deleteProduct(productId) {\n    const response = await axios.delete(`${this.BASE_URL}/product/delete/${productId}`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /**CATEGORY */\n  static async createCategory(category) {\n    const response = await axios.post(`${this.BASE_URL}/category/create`, category, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n  static async getAllCategory() {\n    const response = await axios.get(`${this.BASE_URL}/category/get-all-category`);\n    return response.data;\n  }\n  static async getCategoryById(categoryId) {\n    const response = await axios.get(`${this.BASE_URL}/category/get-category-by-id`, {\n      params: {\n        categoryId\n      }\n    });\n    return response.data;\n  }\n  static async updateCategory(categoryId, name) {\n    const response = await axios.put(`${this.BASE_URL}/category/update`, null, {\n      headers: this.getHeader(),\n      params: {\n        categoryId,\n        name\n      }\n    });\n    return response.data;\n  }\n  static async deleteCategory(categoryId) {\n    const response = await axios.delete(`${this.BASE_URL}/category/delete`, {\n      headers: this.getHeader(),\n      params: {\n        categoryId\n      }\n    });\n    return response.data;\n  }\n\n  /**ADDRESS */\n  static async saveAddress(address) {\n    try {\n      console.log(\"Saving address:\", address);\n\n      // Đảm bảo chỉ gửi các trường cần thiết\n      const addressDto = {\n        id: address.id || null,\n        street: address.street || '',\n        city: address.city || '',\n        state: address.state || '',\n        country: address.country || ''\n      };\n      const response = await axios.post(`${this.BASE_URL}/address/save`, addressDto, {\n        headers: this.getHeader(),\n        withCredentials: true\n      });\n      console.log(\"Address saved successfully:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Error saving address:\", error);\n      if (error.response) {\n        console.error(\"Error response:\", error.response.data);\n      }\n      throw error;\n    }\n  }\n\n  /**CHAT BOT */\n  static async chatWithBot(prompt) {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/bot/chat`, {\n        params: {\n          prompt\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Lỗi khi chat với bot:', error);\n      throw error;\n    }\n  }\n\n  /**AUTHENTICATION CHECKER */\n  static logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('role');\n  }\n  static isAuthenticated() {\n    const token = localStorage.getItem('token');\n    return !!token;\n  }\n  static isAdmin() {\n    const role = localStorage.getItem('role');\n    return role === 'ADMIN';\n  }\n  static setupAxiosInterceptors() {\n    axios.interceptors.response.use(response => response, async error => {\n      const originalRequest = error.config;\n\n      // Nếu là lỗi 401 và chưa thử refresh token\n      if (error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n        try {\n          // Thử refresh token\n          await ApiService.refreshToken();\n\n          // Cập nhật token mới vào header\n          originalRequest.headers['Authorization'] = 'Bearer ' + localStorage.getItem('token');\n\n          // Thử lại request ban đầu\n          return axios(originalRequest);\n        } catch (refreshError) {\n          // Nếu refresh token thất bại\n          ApiService.logout();\n          window.location.href = '/login';\n          return Promise.reject(refreshError);\n        }\n      }\n      return Promise.reject(error);\n    });\n  }\n  static async refreshToken() {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      const response = await axios.post(`${this.BASE_URL}/auth/refresh-token`, {\n        refreshToken\n      });\n      if (response.data.token) {\n        localStorage.setItem('token', response.data.token);\n        return response.data.token;\n      }\n      throw new Error('No token received');\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**REVIEW ENDPOINTS */\n  static async getProductReviews(productId) {\n    const response = await axios.get(`${this.BASE_URL}/reviews/product/${productId}`);\n    return response.data;\n  }\n  static async createReview(review) {\n    const response = await axios.post(`${this.BASE_URL}/reviews`, review, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n  static async updateReview(reviewId, review) {\n    const response = await axios.put(`${this.BASE_URL}/reviews/${reviewId}`, review, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n  static async deleteReview(reviewId) {\n    const response = await axios.delete(`${this.BASE_URL}/reviews/${reviewId}`, {\n      headers: this.getHeader()\n    });\n    return response.data;\n  }\n\n  /**ORDER ENDPOINTS */\n  static async createOrder(orderData) {\n    try {\n      console.log(\"Creating order:\", orderData);\n\n      // Kiểm tra xem dữ liệu có đúng định dạng không\n      const orderItems = orderData.orderItems || orderData.items;\n      if (!orderItems || !Array.isArray(orderItems)) {\n        throw new Error(\"Dữ liệu đơn hàng không hợp lệ: Thiếu danh sách sản phẩm\");\n      }\n\n      // Kiểm tra cấu trúc của từng item\n      orderItems.forEach(item => {\n        if (!item.productId) {\n          console.error(\"Item missing productId:\", item);\n          throw new Error(\"Thiếu productId trong item\");\n        }\n        if (!item.quantity || item.quantity <= 0) {\n          console.error(\"Item with invalid quantity:\", item);\n          throw new Error(\"Số lượng sản phẩm phải lớn hơn 0\");\n        }\n        if (!item.price || item.price <= 0) {\n          console.error(\"Item with invalid price:\", item);\n          throw new Error(\"Giá sản phẩm phải lớn hơn 0\");\n        }\n      });\n\n      // Đảm bảo dữ liệu gửi đi phù hợp với OrderDTO từ backend\n      const orderDTO = {\n        totalPrice: orderData.totalPrice,\n        paymentMethod: orderData.paymentMethod,\n        shippingAddress: orderData.shippingAddress,\n        status: orderData.status,\n        orderItems: orderItems.map(item => ({\n          productId: item.productId,\n          quantity: item.quantity,\n          price: item.price\n          // Không gửi userId vì sẽ được lấy từ token\n        }))\n      };\n      console.log(\"Final orderDTO:\", orderDTO);\n      const response = await axios.post(`${this.BASE_URL}/order/create`, orderDTO, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Order creation error:\", error);\n      if (error.response) {\n        console.error(\"Error response data:\", error.response.data);\n      }\n      throw error;\n    }\n  }\n  static async createVNPayUrl(orderId, amount) {\n    try {\n      const response = await axios.post(`${this.BASE_URL}/payment/create`, null, {\n        headers: this.getHeader(),\n        params: {\n          orderId,\n          amount\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"VNPAY error:\", error);\n      throw error;\n    }\n  }\n  static async createZaloPayOrder(paymentData) {\n    try {\n      console.log(\"Creating ZaloPay order for order ID:\", paymentData.orderId, \"amount:\", paymentData.amount);\n      const response = await axios.post(`${this.BASE_URL}/zalopay/create-order`, {\n        amount: Math.round(paymentData.amount),\n        orderID: paymentData.orderId,\n        description: `Thanh toán đơn hàng #${paymentData.orderId}`\n      }, {\n        headers: this.getHeader()\n      });\n      console.log(\"Full ZaloPay API response:\", response.data);\n\n      // Nếu response không có structure rõ ràng, kiểm tra cấu trúc response\n      if (!response.data) {\n        throw new Error(\"Không nhận được phản hồi từ ZaloPay\");\n      }\n\n      // Trả về response nguyên bản để xử lý ở component\n      return response.data;\n    } catch (error) {\n      console.error(\"ZaloPay API error:\", error.response || error);\n      throw error;\n    }\n  }\n  static async checkZaloPayStatus(appTransId) {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/zalopay/order-status/${appTransId}`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error checking ZaloPay status:\", error);\n      throw error;\n    }\n  }\n  static async getAllOrders() {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/order/all`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error fetching all orders:\", error);\n      throw error;\n    }\n  }\n  static async getUserOrders() {\n    try {\n      if (this.isSessionExpired()) {\n        throw new Error('Phiên làm việc đã hết hạn. Vui lòng đăng nhập lại.');\n      }\n      const response = await axios.get(`${this.BASE_URL}/order/user`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      if (error.message === 'Phiên làm việc đã hết hạn. Vui lòng đăng nhập lại.') {\n        // Xử lý đăng xuất và chuyển hướng\n        this.logout();\n        window.location.href = '/login?expired=true';\n      }\n      console.error(\"Error fetching user orders:\", error);\n      throw error;\n    }\n  }\n  static async getOrdersByStatus(status) {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/order/status/${status}`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching orders by status ${status}:`, error);\n      throw error;\n    }\n  }\n  static async updateOrderStatus(orderId, status) {\n    try {\n      const response = await axios.put(`${this.BASE_URL}/order/${orderId}/status?status=${status}`, null, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      throw error;\n    }\n  }\n  static async updatePaymentStatus(orderId, status) {\n    try {\n      const response = await axios.put(`${this.BASE_URL}/order/${orderId}/payment-status?status=${status}`, null, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Error updating payment status:\", error);\n      throw error;\n    }\n  }\n  static async getOrderStatus(orderId) {\n    try {\n      console.log(\"Checking status for order:\", orderId);\n      const response = await axios.get(`${this.BASE_URL}/order/status/${orderId}`, {\n        headers: this.getHeader()\n      });\n      if (response && response.data) {\n        console.log(\"Order status response:\", response.data);\n        return {\n          success: true,\n          status: response.data.status || 'UNKNOWN',\n          paymentStatus: response.data.paymentStatus || 'UNKNOWN',\n          lastUpdated: response.data.lastUpdated,\n          orderId: orderId\n        };\n      }\n      return {\n        success: false,\n        status: 'UNKNOWN',\n        paymentStatus: 'UNKNOWN',\n        error: 'Invalid response format'\n      };\n    } catch (error) {\n      console.error('Error checking order status:', error);\n      return {\n        success: false,\n        status: 'ERROR',\n        paymentStatus: 'ERROR',\n        error: error.message || 'Failed to check order status'\n      };\n    }\n  }\n  static async handlePaymentCallback(callbackData) {\n    try {\n      const response = await axios.post(`${this.BASE_URL}/payment/callback`, callbackData, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"Payment callback error:\", error);\n      throw error;\n    }\n  }\n  static async getOrderById(orderId) {\n    try {\n      // Sử dụng URL đúng cho API lấy chi tiết đơn hàng\n      const response = await axios.get(`${this.BASE_URL}/order/status/${orderId}`, {\n        headers: this.getHeader()\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching order by ID:`, error);\n      throw error;\n    }\n  }\n\n  // Thêm phương thức kiểm tra kết nối\n  static async checkConnection() {\n    try {\n      const response = await axios.get(`${this.BASE_URL}/api/health`, {\n        timeout: 5000\n      });\n      return response.status === 200;\n    } catch (error) {\n      console.error(\"Connection check failed:\", error);\n      return false;\n    }\n  }\n\n  // Thêm phương thức để kiểm tra phiên làm việc\n  static isSessionExpired() {\n    const token = localStorage.getItem('token');\n    if (!token) return true;\n\n    // Giải mã JWT để kiểm tra thời gian hết hạn\n    try {\n      const base64Url = token.split('.')[1];\n      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n      }).join(''));\n      const {\n        exp\n      } = JSON.parse(jsonPayload);\n\n      // Kiểm tra xem token đã hết hạn chưa\n      return exp * 1000 < Date.now();\n    } catch (e) {\n      console.error('Error parsing token:', e);\n      return true; // Nếu không thể phân tích token, coi như đã hết hạn\n    }\n  }\n}\nApiService.BASE_URL = \"http://localhost:8080\";","map":{"version":3,"names":["axios","ApiService","constructor","axiosInstance","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","token","getToken","Authorization","error","Promise","reject","response","code","console","message","Error","getHeader","localStorage","getItem","log","warn","registerUser","registration","post","BASE_URL","data","loginUser","loginDetails","getLoggedInUserInfo","get","getUserById","userId","params","id","getAllUsers","addProduct","formData","undefined","updateProduct","key","value","entries","name","put","status","_error$config","_error$config2","_error$config3","_error$response","_error$response2","_error$response3","url","method","statusText","getAllProducts","searchProducts","searchValue","getAllProductsByCategoryId","categoryId","getProductById","productId","deleteProduct","delete","createCategory","category","getAllCategory","getCategoryById","updateCategory","deleteCategory","saveAddress","address","addressDto","street","city","state","country","chatWithBot","prompt","logout","removeItem","isAuthenticated","isAdmin","role","setupAxiosInterceptors","originalRequest","_retry","refreshToken","refreshError","window","location","href","setItem","getProductReviews","createReview","review","updateReview","reviewId","deleteReview","createOrder","orderData","orderItems","items","Array","isArray","forEach","item","quantity","price","orderDTO","totalPrice","paymentMethod","shippingAddress","map","createVNPayUrl","orderId","amount","createZaloPayOrder","paymentData","Math","round","orderID","description","checkZaloPayStatus","appTransId","getAllOrders","getUserOrders","isSessionExpired","getOrdersByStatus","updateOrderStatus","updatePaymentStatus","getOrderStatus","success","paymentStatus","lastUpdated","handlePaymentCallback","callbackData","getOrderById","checkConnection","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","c","charCodeAt","toString","slice","join","exp","JSON","parse","Date","now","e"],"sources":["C:/Users/MSI GF63/Desktop/ShoppingWeb/frontend/src/service/ApiService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nexport default class ApiService {\r\n\r\n    static BASE_URL = \"http://localhost:8080\";\r\n\r\n    constructor() {\r\n        this.axiosInstance = axios.create({\r\n            baseURL: 'http://localhost:8080',\r\n            timeout: 10000,\r\n            withCredentials: true,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        });\r\n        \r\n        // Thêm interceptor để xử lý token\r\n        this.axiosInstance.interceptors.request.use(\r\n            (config) => {\r\n                const token = this.getToken();\r\n                if (token) {\r\n                    config.headers.Authorization = `Bearer ${token}`;\r\n                }\r\n                return config;\r\n            },\r\n            (error) => Promise.reject(error)\r\n        );\r\n        \r\n        // Thêm interceptor để xử lý lỗi\r\n        this.axiosInstance.interceptors.response.use(\r\n            (response) => response,\r\n            (error) => {\r\n                // Xử lý lỗi CORS hoặc lỗi mạng\r\n                if (error.code === 'ERR_NETWORK' || !error.response) {\r\n                    console.error('Network error or CORS issue:', error.message);\r\n                    return Promise.reject(new Error('Lỗi kết nối đến server. Vui lòng thử lại sau.'));\r\n                }\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    static getHeader() {\r\n        const token = localStorage.getItem(\"token\");\r\n        console.log('Current token:', token); // Debug log\r\n        \r\n        if (!token) {\r\n            console.warn('No token found in localStorage');\r\n            return {\r\n                \"Content-Type\": \"application/json\"\r\n            };\r\n        }\r\n\r\n        return {\r\n            'Authorization': `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n    }\r\n\r\n    /**AUTH && USERS API */\r\n    static async registerUser(registration) {\r\n        const response = await axios.post(`${this.BASE_URL}/auth/register`, registration);\r\n        return response.data;\r\n    }\r\n\r\n    static async loginUser(loginDetails) {\r\n        const response = await axios.post(`${this.BASE_URL}/auth/login`, loginDetails);\r\n        return response.data;\r\n    }\r\n\r\n    static async getLoggedInUserInfo() {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/user/info`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching user info:\", error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static async getUserById(userId) {\r\n        const response = await axios.get(`${this.BASE_URL}/user/get-by-id`, {\r\n            headers: this.getHeader(),\r\n            params: { id: userId }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async getAllUsers() {\r\n        const response = await axios.get(`${this.BASE_URL}/user/get-all`, {\r\n            headers: this.getHeader()\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    /**PRODUCT ENDPOINT */\r\n    static async addProduct(formData) {\r\n        const token = localStorage.getItem(\"token\");\r\n        const response = await axios.post(`${this.BASE_URL}/product/create`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n                'Authorization': token ? `Bearer ${token}` : undefined\r\n            }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async updateProduct(formData) {\r\n        try {\r\n            const token = localStorage.getItem(\"token\");\r\n            \r\n            // Log request details\r\n            console.log('=== DEBUG: Request Details ===');\r\n            console.log('URL:', `${this.BASE_URL}/product/update`);\r\n            console.log('Headers:', {\r\n                'Content-Type': 'multipart/form-data',\r\n                'Authorization': `Bearer ${token}`\r\n            });\r\n            console.log('FormData content:');\r\n            for (let [key, value] of formData.entries()) {\r\n                if (key === 'image') {\r\n                    console.log('image:', value ? `File: ${value.name}` : 'No image');\r\n                } else {\r\n                    console.log(`${key}:`, value, `(type: ${typeof value})`);\r\n                }\r\n            }\r\n\r\n            const response = await axios.put(\r\n                `${this.BASE_URL}/product/update`,\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data',\r\n                        'Authorization': `Bearer ${token}`\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log('=== DEBUG: Response Success ===');\r\n            console.log('Status:', response.status);\r\n            console.log('Data:', response.data);\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('=== DEBUG: Error Details ===');\r\n            console.error('Request Config:', {\r\n                url: error.config?.url,\r\n                method: error.config?.method,\r\n                headers: error.config?.headers\r\n            });\r\n            console.error('Response Error:', {\r\n                status: error.response?.status,\r\n                statusText: error.response?.statusText,\r\n                data: error.response?.data\r\n            });\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getAllProducts() {\r\n        const response = await axios.get(`${this.BASE_URL}/product/get-all-product`);\r\n        return response.data;\r\n    }\r\n\r\n    static async searchProducts(searchValue) {\r\n        const response = await axios.get(`${this.BASE_URL}/product/search`, {\r\n            params: { searchValue }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async getAllProductsByCategoryId(categoryId) {\r\n        const response = await axios.get(`${this.BASE_URL}/product/get-product-by-category`, {\r\n            params: { categoryId }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async getProductById(productId) {\r\n        const response = await axios.get(`${this.BASE_URL}/product/get-product-by-id`, {\r\n            params: { id: productId }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async deleteProduct(productId) {\r\n        const response = await axios.delete(`${this.BASE_URL}/product/delete/${productId}`, {\r\n            headers: this.getHeader()\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    /**CATEGORY */\r\n    static async createCategory(category) {\r\n        const response = await axios.post(`${this.BASE_URL}/category/create`, category, {\r\n            headers: this.getHeader()\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async getAllCategory() {\r\n        const response = await axios.get(`${this.BASE_URL}/category/get-all-category`);\r\n        return response.data;\r\n    }\r\n\r\n    static async getCategoryById(categoryId) {\r\n        const response = await axios.get(`${this.BASE_URL}/category/get-category-by-id`, {\r\n            params: { categoryId }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async updateCategory(categoryId, name) {\r\n        const response = await axios.put(`${this.BASE_URL}/category/update`, null, {\r\n            headers: this.getHeader(),\r\n            params: { categoryId, name }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async deleteCategory(categoryId) {\r\n        const response = await axios.delete(`${this.BASE_URL}/category/delete`, {\r\n            headers: this.getHeader(),\r\n            params: { categoryId }\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    /**ADDRESS */\r\n    static async saveAddress(address) {\r\n        try {\r\n            console.log(\"Saving address:\", address);\r\n            \r\n            // Đảm bảo chỉ gửi các trường cần thiết\r\n            const addressDto = {\r\n                id: address.id || null,\r\n                street: address.street || '',\r\n                city: address.city || '',\r\n                state: address.state || '',\r\n                country: address.country || ''\r\n            };\r\n            \r\n            const response = await axios.post(`${this.BASE_URL}/address/save`, addressDto, {\r\n                headers: this.getHeader(),\r\n                withCredentials: true\r\n            });\r\n            \r\n            console.log(\"Address saved successfully:\", response.data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error saving address:\", error);\r\n            if (error.response) {\r\n                console.error(\"Error response:\", error.response.data);\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**CHAT BOT */\r\n    static async chatWithBot(prompt) {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/bot/chat`, {\r\n                params: { prompt }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Lỗi khi chat với bot:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**AUTHENTICATION CHECKER */\r\n    static logout() {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('role');\r\n    }\r\n\r\n    static isAuthenticated() {\r\n        const token = localStorage.getItem('token');\r\n        return !!token;\r\n    }\r\n\r\n    static isAdmin() {\r\n        const role = localStorage.getItem('role');\r\n        return role === 'ADMIN';\r\n    }\r\n\r\n    static setupAxiosInterceptors() {\r\n        axios.interceptors.response.use(\r\n            (response) => response,\r\n            async (error) => {\r\n                const originalRequest = error.config;\r\n                \r\n                // Nếu là lỗi 401 và chưa thử refresh token\r\n                if (error.response.status === 401 && !originalRequest._retry) {\r\n                    originalRequest._retry = true;\r\n                    \r\n                    try {\r\n                        // Thử refresh token\r\n                        await ApiService.refreshToken();\r\n                        \r\n                        // Cập nhật token mới vào header\r\n                        originalRequest.headers['Authorization'] = \r\n                            'Bearer ' + localStorage.getItem('token');\r\n                            \r\n                        // Thử lại request ban đầu\r\n                        return axios(originalRequest);\r\n                    } catch (refreshError) {\r\n                        // Nếu refresh token thất bại\r\n                        ApiService.logout();\r\n                        window.location.href = '/login';\r\n                        return Promise.reject(refreshError);\r\n                    }\r\n                }\r\n                return Promise.reject(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    static async refreshToken() {\r\n        try {\r\n            const refreshToken = localStorage.getItem('refreshToken');\r\n            const response = await axios.post(`${this.BASE_URL}/auth/refresh-token`, {\r\n                refreshToken\r\n            });\r\n            \r\n            if (response.data.token) {\r\n                localStorage.setItem('token', response.data.token);\r\n                return response.data.token;\r\n            }\r\n            throw new Error('No token received');\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**REVIEW ENDPOINTS */\r\n    static async getProductReviews(productId) {\r\n        const response = await axios.get(`${this.BASE_URL}/reviews/product/${productId}`);\r\n        return response.data;\r\n    }\r\n\r\n    static async createReview(review) {\r\n        const response = await axios.post(`${this.BASE_URL}/reviews`, review, {\r\n            headers: this.getHeader()\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async updateReview(reviewId, review) {\r\n        const response = await axios.put(`${this.BASE_URL}/reviews/${reviewId}`, review, {\r\n            headers: this.getHeader()\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    static async deleteReview(reviewId) {\r\n        const response = await axios.delete(`${this.BASE_URL}/reviews/${reviewId}`, {\r\n            headers: this.getHeader()\r\n        });\r\n        return response.data;\r\n    }\r\n\r\n    /**ORDER ENDPOINTS */\r\n    static async createOrder(orderData) {\r\n        try {\r\n            console.log(\"Creating order:\", orderData);\r\n            \r\n            // Kiểm tra xem dữ liệu có đúng định dạng không\r\n            const orderItems = orderData.orderItems || orderData.items;\r\n            \r\n            if (!orderItems || !Array.isArray(orderItems)) {\r\n                throw new Error(\"Dữ liệu đơn hàng không hợp lệ: Thiếu danh sách sản phẩm\");\r\n            }\r\n            \r\n            // Kiểm tra cấu trúc của từng item\r\n            orderItems.forEach(item => {\r\n                if (!item.productId) {\r\n                    console.error(\"Item missing productId:\", item);\r\n                    throw new Error(\"Thiếu productId trong item\");\r\n                }\r\n                if (!item.quantity || item.quantity <= 0) {\r\n                    console.error(\"Item with invalid quantity:\", item);\r\n                    throw new Error(\"Số lượng sản phẩm phải lớn hơn 0\");\r\n                }\r\n                if (!item.price || item.price <= 0) {\r\n                    console.error(\"Item with invalid price:\", item);\r\n                    throw new Error(\"Giá sản phẩm phải lớn hơn 0\");\r\n                }\r\n            });\r\n            \r\n            // Đảm bảo dữ liệu gửi đi phù hợp với OrderDTO từ backend\r\n            const orderDTO = {\r\n                totalPrice: orderData.totalPrice,\r\n                paymentMethod: orderData.paymentMethod,\r\n                shippingAddress: orderData.shippingAddress,\r\n                status: orderData.status,\r\n                orderItems: orderItems.map(item => ({\r\n                    productId: item.productId,\r\n                    quantity: item.quantity,\r\n                    price: item.price,\r\n                    // Không gửi userId vì sẽ được lấy từ token\r\n                }))\r\n            };\r\n            \r\n            console.log(\"Final orderDTO:\", orderDTO);\r\n            \r\n            const response = await axios.post(`${this.BASE_URL}/order/create`, orderDTO, {\r\n                headers: this.getHeader()\r\n            });\r\n            \r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Order creation error:\", error);\r\n            if (error.response) {\r\n                console.error(\"Error response data:\", error.response.data);\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async createVNPayUrl(orderId, amount) {\r\n        try {\r\n            const response = await axios.post(`${this.BASE_URL}/payment/create`, null, {\r\n                headers: this.getHeader(),\r\n                params: { orderId, amount }\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"VNPAY error:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async createZaloPayOrder(paymentData) {\r\n        try {\r\n            console.log(\"Creating ZaloPay order for order ID:\", paymentData.orderId, \"amount:\", paymentData.amount);\r\n            \r\n            const response = await axios.post(`${this.BASE_URL}/zalopay/create-order`, {\r\n                amount: Math.round(paymentData.amount),\r\n                orderID: paymentData.orderId,\r\n                description: `Thanh toán đơn hàng #${paymentData.orderId}`\r\n            }, {\r\n                headers: this.getHeader()\r\n            });\r\n            \r\n            console.log(\"Full ZaloPay API response:\", response.data);\r\n            \r\n            // Nếu response không có structure rõ ràng, kiểm tra cấu trúc response\r\n            if (!response.data) {\r\n                throw new Error(\"Không nhận được phản hồi từ ZaloPay\");\r\n            }\r\n            \r\n            // Trả về response nguyên bản để xử lý ở component\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"ZaloPay API error:\", error.response || error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async checkZaloPayStatus(appTransId) {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/zalopay/order-status/${appTransId}`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error checking ZaloPay status:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getAllOrders() {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/order/all`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error fetching all orders:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getUserOrders() {\r\n        try {\r\n            if (this.isSessionExpired()) {\r\n                throw new Error('Phiên làm việc đã hết hạn. Vui lòng đăng nhập lại.');\r\n            }\r\n            \r\n            const response = await axios.get(`${this.BASE_URL}/order/user`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            if (error.message === 'Phiên làm việc đã hết hạn. Vui lòng đăng nhập lại.') {\r\n                // Xử lý đăng xuất và chuyển hướng\r\n                this.logout();\r\n                window.location.href = '/login?expired=true';\r\n            }\r\n            console.error(\"Error fetching user orders:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getOrdersByStatus(status) {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/order/status/${status}`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching orders by status ${status}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async updateOrderStatus(orderId, status) {\r\n        try {\r\n            const response = await axios.put(`${this.BASE_URL}/order/${orderId}/status?status=${status}`, null, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error updating order status:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async updatePaymentStatus(orderId, status) {\r\n        try {\r\n            const response = await axios.put(`${this.BASE_URL}/order/${orderId}/payment-status?status=${status}`, null, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Error updating payment status:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getOrderStatus(orderId) {\r\n        try {\r\n            console.log(\"Checking status for order:\", orderId);\r\n            const response = await axios.get(`${this.BASE_URL}/order/status/${orderId}`, {\r\n                headers: this.getHeader()\r\n            });\r\n            \r\n            if (response && response.data) {\r\n                console.log(\"Order status response:\", response.data);\r\n                return {\r\n                    success: true,\r\n                    status: response.data.status || 'UNKNOWN',\r\n                    paymentStatus: response.data.paymentStatus || 'UNKNOWN', \r\n                    lastUpdated: response.data.lastUpdated,\r\n                    orderId: orderId\r\n                };\r\n            }\r\n            \r\n            return {\r\n                success: false,\r\n                status: 'UNKNOWN',\r\n                paymentStatus: 'UNKNOWN',\r\n                error: 'Invalid response format'\r\n            };\r\n        } catch (error) {\r\n            console.error('Error checking order status:', error);\r\n            \r\n            return {\r\n                success: false,\r\n                status: 'ERROR',\r\n                paymentStatus: 'ERROR',\r\n                error: error.message || 'Failed to check order status' \r\n            };\r\n        }\r\n    }\r\n\r\n    static async handlePaymentCallback(callbackData) {\r\n        try {\r\n            const response = await axios.post(`${this.BASE_URL}/payment/callback`, callbackData, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Payment callback error:\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    static async getOrderById(orderId) {\r\n        try {\r\n            // Sử dụng URL đúng cho API lấy chi tiết đơn hàng\r\n            const response = await axios.get(`${this.BASE_URL}/order/status/${orderId}`, {\r\n                headers: this.getHeader()\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching order by ID:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Thêm phương thức kiểm tra kết nối\r\n    static async checkConnection() {\r\n        try {\r\n            const response = await axios.get(`${this.BASE_URL}/api/health`, { timeout: 5000 });\r\n            return response.status === 200;\r\n        } catch (error) {\r\n            console.error(\"Connection check failed:\", error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Thêm phương thức để kiểm tra phiên làm việc\r\n    static isSessionExpired() {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) return true;\r\n        \r\n        // Giải mã JWT để kiểm tra thời gian hết hạn\r\n        try {\r\n            const base64Url = token.split('.')[1];\r\n            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n            const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => {\r\n                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n            }).join(''));\r\n            \r\n            const { exp } = JSON.parse(jsonPayload);\r\n            \r\n            // Kiểm tra xem token đã hết hạn chưa\r\n            return exp * 1000 < Date.now();\r\n        } catch (e) {\r\n            console.error('Error parsing token:', e);\r\n            return true; // Nếu không thể phân tích token, coi như đã hết hạn\r\n        }\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}